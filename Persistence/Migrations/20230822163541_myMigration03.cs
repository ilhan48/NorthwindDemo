using Microsoft.EntityFrameworkCore.Migrations;

#nullable disable

namespace Persistence.Migrations
{
    /// <inheritdoc />
    public partial class myMigration03 : Migration
    {
        /// <inheritdoc />
        protected override void Up(MigrationBuilder migrationBuilder)
        {
            migrationBuilder.UpdateData(
                table: "Users",
                keyColumn: "Id",
                keyValue: 1,
                columns: new[] { "PasswordHash", "PasswordSalt" },
                values: new object[] { new byte[] { 166, 86, 26, 236, 250, 198, 39, 196, 65, 102, 30, 23, 59, 35, 213, 109, 59, 244, 147, 226, 236, 124, 171, 163, 160, 250, 207, 63, 147, 110, 125, 175, 100, 29, 1, 34, 52, 17, 251, 215, 83, 132, 48, 236, 115, 137, 60, 203, 152, 29, 205, 86, 105, 169, 239, 36, 203, 20, 161, 212, 250, 16, 152, 229 }, new byte[] { 220, 20, 73, 197, 106, 65, 111, 37, 134, 28, 62, 200, 43, 8, 149, 224, 88, 224, 169, 118, 27, 220, 95, 49, 177, 250, 232, 55, 43, 33, 155, 36, 107, 181, 235, 135, 42, 219, 38, 34, 204, 39, 181, 148, 18, 147, 201, 160, 29, 154, 183, 170, 143, 222, 211, 113, 179, 212, 28, 47, 2, 224, 26, 40, 149, 130, 239, 116, 23, 181, 183, 119, 157, 141, 107, 30, 87, 126, 111, 29, 228, 247, 96, 229, 120, 173, 168, 76, 216, 104, 236, 134, 78, 48, 68, 96, 243, 153, 115, 244, 5, 121, 158, 49, 203, 99, 102, 221, 80, 81, 45, 28, 93, 59, 77, 165, 221, 119, 155, 237, 205, 238, 234, 94, 174, 199, 111, 223 } });
        }

        /// <inheritdoc />
        protected override void Down(MigrationBuilder migrationBuilder)
        {
            migrationBuilder.UpdateData(
                table: "Users",
                keyColumn: "Id",
                keyValue: 1,
                columns: new[] { "PasswordHash", "PasswordSalt" },
                values: new object[] { new byte[] { 197, 173, 221, 209, 42, 181, 172, 16, 85, 29, 123, 193, 26, 28, 205, 217, 166, 165, 10, 206, 9, 9, 88, 7, 139, 120, 25, 152, 199, 147, 68, 40, 128, 94, 36, 207, 228, 172, 208, 245, 220, 219, 14, 80, 80, 194, 33, 43, 229, 191, 70, 246, 58, 183, 226, 229, 101, 35, 13, 79, 93, 248, 201, 14 }, new byte[] { 72, 238, 25, 66, 177, 248, 197, 221, 123, 226, 207, 245, 44, 151, 181, 130, 104, 29, 196, 98, 10, 225, 11, 200, 183, 72, 255, 64, 133, 0, 26, 203, 243, 253, 71, 127, 30, 3, 216, 43, 23, 67, 3, 61, 4, 219, 176, 31, 204, 205, 159, 16, 171, 169, 51, 181, 220, 10, 233, 64, 189, 218, 1, 21, 113, 164, 146, 20, 236, 221, 9, 215, 29, 84, 180, 160, 35, 214, 213, 141, 29, 82, 21, 78, 72, 183, 187, 147, 17, 17, 81, 191, 50, 181, 12, 98, 223, 219, 172, 201, 92, 248, 90, 209, 172, 49, 116, 114, 202, 9, 161, 169, 211, 6, 232, 45, 250, 144, 246, 129, 184, 174, 228, 47, 194, 196, 130, 26 } });
        }
    }
}
